---
- name: Install socat package
  become: true
  ansible.builtin.package:
    name: socat
    state: present

- name: Ensure acme.sh directories exist
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /etc/bigbluebutton/acme.sh
    - /etc/bigbluebutton/acme.sh/.download

- name: Check if we need to download acme.sh
  stat:
    path: /etc/bigbluebutton/acme.sh/.download/acme.sh
  register: stat_result
  when: not bbb_acmesh_update

- name: Download or update acme.sh
  become: true
  ansible.builtin.get_url:
    url: "{{bbb_acmesh_download}}"
    dest: /etc/bigbluebutton/acme.sh/.download/acme.sh
    mode: '0755'
  when: bbb_acmesh_update or not (stat_result.stat.exists | default(False))

- name: Install acme.sh and register an account
  become: true
  ansible.builtin.command:
    chdir: /etc/bigbluebutton/acme.sh/.download
    cmd: >-
      ./acme.sh --install
      --home /etc/bigbluebutton/acme.sh/
      --accountemail {{ bbb_acme_email }}
      --server {{ bbb_acme_api }}
      --no-cron
      --no-profile
  register: acme_install_result
  changed_when: "'ok' in acme_install_result.stdout"

- name: Issue certificate with acme.sh
  become: true
  ansible.builtin.command:
    chdir: /etc/bigbluebutton/acme.sh
    cmd: >-
      ./acme.sh --issue
      --home /etc/bigbluebutton/acme.sh/
      --server {{ bbb_acme_api }}
      --domain {{ bbb_hostname }}
      --standalone
      --pre-hook "systemctl stop nginx.service"
      --post-hook "systemctl start nginx.service"
      --key-file {{ bbb_ssl_key }}
      --fullchain-file {{ bbb_ssl_cert }}
      --keylength ec-256
  register: result
  changed_when: "'new certificate deployed' in result.stdout"
  failed_when: result.rc not in [ 0, 2 ]
  notify: Reload nginx

- name: Install ACME cron
  become: true
  ansible.builtin.cron:
    name: "ACME cron"
    hour: "4"
    minute: "13"
    job: "/etc/bigbluebutton/acme.sh/acme.sh --cron --home /etc/bigbluebutton/acme.sh"
